{"ast":null,"code":"import _classCallCheck from \"/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/src/coinPage/coinPage.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport ReactApexChart from \"react-apexcharts\";\nimport './coinPage.css';\nvar url = 'http://localhost:5000/api/bitcoin';\n\nvar coinPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(coinPage, _Component);\n\n  function coinPage(props) {\n    var _this;\n\n    _classCallCheck(this, coinPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(coinPage).call(this, props));\n\n    _this.updateSeries = function (rawData) {\n      var updateData = _this.normalizedData(rawData); // console.log(updateData)\n\n\n      _this.setState({\n        series: updateData\n      });\n    };\n\n    _this.extractPrice = function (rawData) {\n      // arr of { x: '05/06/2014', y: 54 }\n      // x(date) y(price)\n      var dataSet = [];\n\n      for (var i in rawData) {\n        dataSet.push(Object.assign({}, {\n          x: rawData[i].date,\n          y: Number(rawData[i].price)\n        }));\n      }\n\n      return Object.assign({}, {\n        name: 'Price',\n        type: 'line',\n        data: dataSet\n      });\n    };\n\n    _this.extractTxVol = function (rawData) {\n      // arr of { x: '05/06/2014', y: 54 }\n      // x(date) y(price)\n      var dataSet = [];\n\n      for (var i in rawData) {\n        dataSet.push(Object.assign({}, {\n          x: rawData[i].date,\n          y: Number(rawData[i].txVol)\n        }));\n      }\n\n      return Object.assign({}, {\n        name: 'TxVol',\n        type: 'column',\n        data: dataSet\n      });\n    };\n\n    _this.normalizedData = function (input) {\n      var price = _this.extractPrice(input);\n\n      var txVol = _this.extractTxVol(input);\n\n      return [price, txVol];\n    };\n\n    _this.handleClick = function (e) {\n      var history = _this.state.history;\n      var total = history.length;\n\n      switch (e.target.value) {\n        case '7d':\n          _this.updateSeries(history.slice(total - 7));\n\n          break;\n\n        case '1m':\n          _this.updateSeries(history.slice(total - 30));\n\n          break;\n\n        case '3m':\n          _this.updateSeries(history.slice(total - 90));\n\n          break;\n\n        case '1y':\n          _this.updateSeries(history.slice(total - 365));\n\n          break;\n\n        case '5y':\n          _this.updateSeries(history.slice(total - 365 * 5));\n\n          break;\n\n        default:\n          _this.updateSeries(history);\n\n      }\n    };\n\n    _this.state = {\n      options: {\n        title: {\n          text: 'Bitcoin Price Movement'\n        },\n        xaxis: {\n          type: 'datetime'\n        },\n        tooltip: {\n          shared: true\n        },\n        chart: {\n          stacked: false\n        },\n        stroke: {\n          // width: [1, 1, 1],\n          curve: 'smooth'\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: '50%'\n          }\n        },\n        markers: {\n          size: 0\n        },\n        yaxis: [{\n          title: {\n            text: 'Price'\n          },\n          labels: {\n            formatter: function formatter(val) {\n              return \"\".concat(val, \"USD\");\n            }\n          }\n        }, {\n          show: false,\n          // min: 0,\n          max: 163942095652,\n          title: {\n            text: 'txVol(24hr)'\n          },\n          labels: {\n            formatter: function formatter(val) {\n              var million = 100000000;\n              var BillionBase = val / million;\n              return \"\".concat(BillionBase.toFixed(2), \"M\");\n            }\n          }\n        }]\n      },\n      series: [{\n        type: 'line',\n        data: [{\n          x: \"2017-11-12\",\n          y: 6295.45\n        }]\n      }, {\n        type: 'column',\n        data: [{\n          x: \"2017-11-12\",\n          y: 6295.45\n        }]\n      }] // series: [],\n\n    };\n    return _this;\n  }\n\n  _createClass(coinPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get(url).then(function (res) {\n        _this2.setState({\n          history: res.data\n        });\n\n        _this2.updateSeries(res.data.slice(res.data.length - 365 * 5));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"coininfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Hello\"), React.createElement(\"section\", {\n        className: \"chartbutton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.handleClick,\n        value: \"7d\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"7d\"), React.createElement(\"button\", {\n        onClick: this.handleClick,\n        value: \"1m\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"1m\"), React.createElement(\"button\", {\n        onClick: this.handleClick,\n        value: \"3m\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"3m\"), React.createElement(\"button\", {\n        onClick: this.handleClick,\n        value: \"1y\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"1y\"), React.createElement(\"button\", {\n        onClick: this.handleClick,\n        value: \"5y\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"5y\")), React.createElement(ReactApexChart, {\n        className: \"chart\",\n        options: this.state.options,\n        series: this.state.series,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return coinPage;\n}(Component);\n\nexport default coinPage;","map":{"version":3,"sources":["/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/src/coinPage/coinPage.js"],"names":["React","Component","axios","ReactApexChart","url","coinPage","props","updateSeries","rawData","updateData","normalizedData","setState","series","extractPrice","dataSet","i","push","Object","assign","x","date","y","Number","price","name","type","data","extractTxVol","txVol","input","handleClick","e","history","state","total","length","target","value","slice","options","title","text","xaxis","tooltip","shared","chart","stacked","stroke","curve","plotOptions","bar","columnWidth","markers","size","yaxis","labels","formatter","val","show","max","million","BillionBase","toFixed","get","then","res"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport ReactApexChart from \"react-apexcharts\";\nimport './coinPage.css'\n\nconst url = 'http://localhost:5000/api/bitcoin'\n\nclass coinPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            options: {\n                title: {\n                    text: 'Bitcoin Price Movement'\n                },\n                xaxis: {\n                    type: 'datetime'\n                },\n                tooltip: {\n                    shared: true,\n                },\n                chart: {\n                    stacked: false,\n                },\n                stroke: {\n                    // width: [1, 1, 1],\n                    curve: 'smooth'\n                },\n                plotOptions: {\n                    bar: {\n                        columnWidth: '50%'\n                    }\n                },\n                markers: {\n                    size: 0,\n                },\n                yaxis: [\n                    {   \n                        title: {\n                            text: 'Price',\n                        },\n                        labels: {\n                            formatter: function (val) {\n                                return `${val}USD`\n                            }\n                        }\n                    },\n                    {\n                        show: false,\n                        // min: 0,\n                        max: 163942095652,\n                        title: {\n                            text: 'txVol(24hr)'\n                        },\n                        labels: {\n                            formatter: function (val) {\n                                const million = 100000000\n                                let BillionBase = (val / million)\n                                return `${BillionBase.toFixed(2)}M`\n                            }\n                        }\n                    }\n                ]\n            },\n            series: [\n                {\n                    type: 'line', data: [\n                        { x: \"2017-11-12\", y: 6295.45 },\n                    ]\n                }, {\n                    type: 'column', data: [\n                        { x: \"2017-11-12\", y: 6295.45 },\n                    ]\n                }\n            ]\n            // series: [],\n        }\n    }\n\n    updateSeries = (rawData) => {\n        let updateData = this.normalizedData(rawData)\n        // console.log(updateData)\n        this.setState({ series: updateData })\n    }\n\n    extractPrice = (rawData) => {\n        // arr of { x: '05/06/2014', y: 54 }\n        // x(date) y(price)\n        let dataSet = []\n        for (let i in rawData) {\n            dataSet.push(Object.assign({}, {\n                x: rawData[i].date,\n                y: Number(rawData[i].price)\n            }))\n        }\n        return Object.assign({}, {\n            name: 'Price',\n            type: 'line',\n            data: dataSet\n        })\n    }\n\n    extractTxVol = (rawData) => {\n        // arr of { x: '05/06/2014', y: 54 }\n        // x(date) y(price)\n        let dataSet = []\n        for (let i in rawData) {\n            dataSet.push(Object.assign({}, {\n                x: rawData[i].date,\n                y: Number(rawData[i].txVol)\n            }))\n        }\n        return Object.assign({}, {\n            name: 'TxVol',\n            type: 'column',\n            data: dataSet\n        })\n    }\n\n    normalizedData = (input) => {\n        let price = this.extractPrice(input)\n        let txVol = this.extractTxVol(input)\n        return [price, txVol]\n    }\n\n    componentDidMount() {\n        axios.get(url).then(res => {\n            this.setState({history : res.data})\n            this.updateSeries(res.data.slice(res.data.length -365 * 5))\n        })\n    }\n\n    handleClick = (e)=>{\n        const history = this.state.history\n        const total = history.length\n        switch(e.target.value){\n            case '7d':\n                this.updateSeries(history.slice((total-7)))\n                break;\n            case '1m':\n                this.updateSeries(history.slice((total-30)))\n                break;\n            case '3m':\n                this.updateSeries(history.slice((total-90)))\n                break;\n            case '1y':\n                this.updateSeries(history.slice((total-365)))\n                break;\n            case '5y':\n                this.updateSeries(history.slice((total - 365 * 5)))\n                break;\n            default:\n                this.updateSeries(history)\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"coininfo\">\n                <p>Hello</p>\n                <section className=\"chartbutton\">\n                <button onClick={this.handleClick} value=\"7d\">7d</button>\n                <button onClick={this.handleClick} value='1m'>1m</button>\n                <button onClick={this.handleClick} value='3m'>3m</button>\n                <button onClick={this.handleClick} value='1y'>1y</button>\n                <button onClick={this.handleClick} value='5y'>5y</button>\n                </section>\n                <ReactApexChart\n                    className=\"chart\"\n                    options={this.state.options}\n                    series={this.state.series}\n                    \n                />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default coinPage;"]},"metadata":{},"sourceType":"module"}