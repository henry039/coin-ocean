{"ast":null,"code":"import _classCallCheck from \"/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/src/coinPage/Section/hourandminchart/HM.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport ReactApexChart from \"react-apexcharts\";\nvar url = \"http://localhost:5000/api/bitcoin\";\n\nvar Hourandmin =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Hourandmin, _React$Component);\n\n  function Hourandmin(props) {\n    var _this;\n\n    _classCallCheck(this, Hourandmin);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Hourandmin).call(this, props));\n\n    _this.updateSeries = function (rawData) {\n      var updateData = _this.normalizedData(rawData); // console.log(updateData)\n\n\n      _this.setState({\n        series: updateData\n      });\n    };\n\n    _this.extractPrice = function (rawData) {\n      // arr of { x: '05/06/2014', y: 54 }\n      // x(date) y(price)\n      var dataSet = [];\n\n      for (var i in rawData) {\n        dataSet.push(Object.assign({}, {\n          x: rawData[i].date,\n          y: Number(rawData[i].price)\n        }));\n      }\n\n      return Object.assign({}, {\n        name: \"Price\",\n        type: \"line\",\n        data: dataSet\n      });\n    };\n\n    _this.extractTxVol = function (rawData) {\n      // arr of { x: '05/06/2014', y: 54 }\n      // x(date) y(price)\n      var dataSet = [];\n\n      for (var i in rawData) {\n        dataSet.push(Object.assign({}, {\n          x: rawData[i].date,\n          y: Number(rawData[i].txVol)\n        }));\n      }\n\n      return Object.assign({}, {\n        name: \"TxVol\",\n        type: \"column\",\n        data: dataSet\n      });\n    };\n\n    _this.normalizedData = function (input) {\n      var price = _this.extractPrice(input);\n\n      var txVol = _this.extractTxVol(input);\n\n      return [price, txVol];\n    };\n\n    _this.state = {\n      options: {\n        title: {\n          text: \"Bitcoin Price Movement\"\n        },\n        xaxis: {\n          type: \"datetime\"\n        },\n        tooltip: {\n          shared: true\n        },\n        chart: {\n          stacked: false\n        },\n        stroke: {\n          // width: [1, 1, 1],\n          curve: \"smooth\"\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: \"50%\"\n          }\n        },\n        markers: {\n          size: 0\n        },\n        yaxis: [{\n          title: {\n            text: \"Price\"\n          },\n          labels: {\n            formatter: function formatter(val) {\n              return \"\".concat(val, \"USD\");\n            }\n          }\n        }, {\n          show: false,\n          // min: 0,\n          max: 163942095652,\n          title: {\n            text: \"txVol(24hr)\"\n          },\n          labels: {\n            formatter: function formatter(val) {\n              var million = 100000000;\n              var BillionBase = val / million;\n              return \"\".concat(BillionBase.toFixed(2), \"M\");\n            }\n          }\n        }]\n      },\n      series: [{\n        type: \"line\",\n        data: [{\n          x: \"2017-11-12\",\n          y: 6295.45\n        }]\n      }, {\n        type: \"column\",\n        data: [{\n          x: \"2017-11-12\",\n          y: 6295.45\n        }]\n      }] // series: [],\n\n    };\n    return _this;\n  }\n\n  _createClass(Hourandmin, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get(url).then(function (res) {\n        _this2.setState({\n          history: res.data\n        });\n\n        _this2.updateSeries(res.data.slice(res.data.length - 365 * 5));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(ReactApexChart, {\n        options: this.state.options,\n        series: this.state.series,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(ReactApexChart, {\n        options: this.state.options,\n        series: this.state.series,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Hourandmin;\n}(React.Component);\n\nexport default Hourandmin;","map":{"version":3,"sources":["/Users/yukwachoi/Desktop/EasyMoney/coin-ocean/src/coinPage/Section/hourandminchart/HM.js"],"names":["React","axios","ReactApexChart","url","Hourandmin","props","updateSeries","rawData","updateData","normalizedData","setState","series","extractPrice","dataSet","i","push","Object","assign","x","date","y","Number","price","name","type","data","extractTxVol","txVol","input","state","options","title","text","xaxis","tooltip","shared","chart","stacked","stroke","curve","plotOptions","bar","columnWidth","markers","size","yaxis","labels","formatter","val","show","max","million","BillionBase","toFixed","get","then","res","history","slice","length","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport ReactApexChart from \"react-apexcharts\";\n\nconst url = \"http://localhost:5000/api/bitcoin\";\n\nclass Hourandmin extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: {\n        title: {\n          text: \"Bitcoin Price Movement\"\n        },\n        xaxis: {\n          type: \"datetime\"\n        },\n        tooltip: {\n          shared: true\n        },\n        chart: {\n          stacked: false\n        },\n        stroke: {\n          // width: [1, 1, 1],\n          curve: \"smooth\"\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: \"50%\"\n          }\n        },\n        markers: {\n          size: 0\n        },\n        yaxis: [\n          {\n            title: {\n              text: \"Price\"\n            },\n            labels: {\n              formatter: function(val) {\n                return `${val}USD`;\n              }\n            }\n          },\n          {\n            show: false,\n            // min: 0,\n            max: 163942095652,\n            title: {\n              text: \"txVol(24hr)\"\n            },\n            labels: {\n              formatter: function(val) {\n                const million = 100000000;\n                let BillionBase = val / million;\n                return `${BillionBase.toFixed(2)}M`;\n              }\n            }\n          }\n        ]\n      },\n      series: [\n        {\n          type: \"line\",\n          data: [{ x: \"2017-11-12\", y: 6295.45 }]\n        },\n        {\n          type: \"column\",\n          data: [{ x: \"2017-11-12\", y: 6295.45 }]\n        }\n      ]\n      // series: [],\n    };\n  }\n\n  updateSeries = rawData => {\n    let updateData = this.normalizedData(rawData);\n    // console.log(updateData)\n    this.setState({ series: updateData });\n  };\n\n  extractPrice = rawData => {\n    // arr of { x: '05/06/2014', y: 54 }\n    // x(date) y(price)\n    let dataSet = [];\n    for (let i in rawData) {\n      dataSet.push(\n        Object.assign(\n          {},\n          {\n            x: rawData[i].date,\n            y: Number(rawData[i].price)\n          }\n        )\n      );\n    }\n    return Object.assign(\n      {},\n      {\n        name: \"Price\",\n        type: \"line\",\n        data: dataSet\n      }\n    );\n  };\n\n  extractTxVol = rawData => {\n    // arr of { x: '05/06/2014', y: 54 }\n    // x(date) y(price)\n    let dataSet = [];\n    for (let i in rawData) {\n      dataSet.push(\n        Object.assign(\n          {},\n          {\n            x: rawData[i].date,\n            y: Number(rawData[i].txVol)\n          }\n        )\n      );\n    }\n    return Object.assign(\n      {},\n      {\n        name: \"TxVol\",\n        type: \"column\",\n        data: dataSet\n      }\n    );\n  };\n\n  normalizedData = input => {\n    let price = this.extractPrice(input);\n    let txVol = this.extractTxVol(input);\n    return [price, txVol];\n  };\n\n  componentDidMount() {\n    axios.get(url).then(res => {\n      this.setState({ history: res.data });\n      this.updateSeries(res.data.slice(res.data.length - 365 * 5));\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n            <ReactApexChart\n            options={this.state.options}\n            series={this.state.series}\n            />\n        </div>\n\n        <div></div>\n        <ReactApexChart\n          options={this.state.options}\n          series={this.state.series}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Hourandmin;\n"]},"metadata":{},"sourceType":"module"}